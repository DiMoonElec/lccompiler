namespace LC2.LCCompiler.CodeGenerator.AsmInstruction
{
  enum InstructionBytecodes : byte
  {
    nop = 0x00,
    incr = 0x01,
    decr = 0x02,
    inv = 0x03,
    mul = 0x04,
    div = 0x05,
    rem = 0x06,
    add = 0x07,
    sub = 0x08,
    less = 0x09,
    lesseq = 0x0A,
    more = 0x0B,
    moreeq = 0x0C,
    eq = 0x0D,
    neq = 0x0E,
    lshift = 0x0F,
    rshift = 0x10,
    and = 0x11,
    xor = 0x12,
    or = 0x13,
    not = 0x14,
    push_1 = 0x15,
    push_2 = 0x16,
    push_4 = 0x17,
    push_8 = 0x18,
    dup = 0x19,
    dup_2 = 0x1A,
    drop = 0x1B,
    drop_2 = 0x1C,
    store_1 = 0x1D,
    store_2 = 0x1E,
    store_4 = 0x1F,
    store_8 = 0x20,
    gstore_1 = 0x21,
    gstore_2 = 0x22,
    gstore_4 = 0x23,
    gstore_8 = 0x24,
    astore_1 = 0x25,
    astore_2 = 0x26,
    astore_4 = 0x27,
    astore_8 = 0x28,
    load_1 = 0x29,
    load_2 = 0x2A,
    load_4 = 0x2B,
    load_8 = 0x2C,
    gload_1 = 0x2D,
    gload_2 = 0x2E,
    gload_4 = 0x2F,
    gload_8 = 0x30,
    aload_1 = 0x31,
    aload_2 = 0x32,
    aload_4 = 0x33,
    aload_8 = 0x34,
    call = 0x35,
    call_t = 0x36,
    call_s = 0x37,
    refcall = 0x38,
    syscall = 0x39,
    syscall_t = 0x3A,
    iffalse = 0x3B,
    iffalse_t = 0x3C,
    iffalse_s = 0x3D,
    iftrue = 0x3E,
    iftrue_t = 0x3F,
    iftrue_s = 0x40,
    jmp = 0x41,
    jmp_t = 0x42,
    jmp_s = 0x43,
    ret = 0x44,
    incr_fp = 0x45,
    incr_fp_t = 0x46,
    decr_fp = 0x47,
    decr_fp_t = 0x48,
    load_fp = 0x49,

    bool_to_sbyte = 0x80,
    bool_to_byte = 0x81,
    bool_to_short = 0x82,
    bool_to_ushort = 0x83,
    bool_to_int = 0x84,
    bool_to_uint = 0x85,
    bool_to_long = 0x86,
    bool_to_ulong = 0x87,
    bool_to_float = 0x88,
    bool_to_double = 0x89,

    sbyte_to_bool = 0x8A,
    sbyte_to_byte = 0x8B,
    sbyte_to_short = 0x8C,
    sbyte_to_ushort = 0x8D,
    sbyte_to_int = 0x8E,
    sbyte_to_uint = 0x8F,
    sbyte_to_long = 0x90,
    sbyte_to_ulong = 0x91,
    sbyte_to_float = 0x92,
    sbyte_to_double = 0x93,

    byte_to_bool = 0x94,
    byte_to_sbyte = 0x95,
    byte_to_short = 0x96,
    byte_to_ushort = 0x97,
    byte_to_int = 0x98,
    byte_to_uint = 0x99,
    byte_to_long = 0x9A,
    byte_to_ulong = 0x9B,
    byte_to_float = 0x9C,
    byte_to_double = 0x9D,

    short_to_bool = 0x9E,
    short_to_sbyte = 0x9F,
    short_to_byte = 0xA0,
    short_to_ushort = 0xA1,
    short_to_int = 0xA2,
    short_to_uint = 0xA3,
    short_to_long = 0xA4,
    short_to_ulong = 0xA5,
    short_to_float = 0xA6,
    short_to_double = 0xA7,

    ushort_to_bool = 0xA8,
    ushort_to_sbyte = 0xA9,
    ushort_to_byte = 0xAA,
    ushort_to_short = 0xAB,
    ushort_to_int = 0xAC,
    ushort_to_uint = 0xAD,
    ushort_to_long = 0xAE,
    ushort_to_ulong = 0xAF,
    ushort_to_float = 0xB0,
    ushort_to_double = 0xB1,

    int_to_bool = 0xB2,
    int_to_sbyte = 0xB3,
    int_to_byte = 0xB4,
    int_to_short = 0xB5,
    int_to_ushort = 0xB6,
    int_to_uint = 0xB7,
    int_to_long = 0xB8,
    int_to_ulong = 0xB9,
    int_to_float = 0xBA,
    int_to_double = 0xBB,

    uint_to_bool = 0xBC,
    uint_to_sbyte = 0xBD,
    uint_to_byte = 0xBE,
    uint_to_short = 0xBF,
    uint_to_ushort = 0xC0,
    uint_to_int = 0xC1,
    uint_to_long = 0xC2,
    uint_to_ulong = 0xC3,
    uint_to_float = 0xC4,
    uint_to_double = 0xC5,

    long_to_bool = 0xC6,
    long_to_sbyte = 0xC7,
    long_to_byte = 0xC8,
    long_to_short = 0xC9,
    long_to_ushort = 0xCA,
    long_to_int = 0xCB,
    long_to_uint = 0xCC,
    long_to_uong = 0xCD,
    long_to_float = 0xCE,
    long_to_double = 0xCF,

    ulong_to_bool = 0xD0,
    ulong_to_sbyte = 0xD1,
    ulong_to_byte = 0xD2,
    ulong_to_short = 0xD3,
    ulong_to_ushort = 0xD4,
    ulong_to_int = 0xD5,
    ulong_to_uint = 0xD6,
    ulong_to_long = 0xD7,
    ulong_to_float = 0xD8,
    ulong_to_double = 0xD9,

    float_to_bool = 0xDA,
    float_to_sbyte = 0xDB,
    float_to_byte = 0xDC,
    float_to_short = 0xDD,
    float_to_ushort = 0xDE,
    float_to_int = 0xDF,
    float_to_uint = 0xE0,
    float_to_long = 0xE1,
    float_to_ulong = 0xE2,
    float_to_double = 0xE3,

    double_to_bool = 0xE4,
    double_to_sbyte = 0xE5,
    double_to_byte = 0xE6,
    double_to_short = 0xE7,
    double_to_ushort = 0xE8,
    double_to_int = 0xE9,
    double_to_uint = 0xEA,
    double_to_long = 0xEB,
    double_to_ulong = 0xEC,
    double_to_float = 0xED,

    halt = 0xff,
  }
}
