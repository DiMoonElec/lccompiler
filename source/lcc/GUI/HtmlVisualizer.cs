using LC2.LCCompiler.Compiler;
using System;
using System.IO;
using System.Text;

namespace LC2.LCCompiler.GUI
{
  internal class HtmlVisualizer
  {
    string ModuleName;
    public HtmlVisualizer(Node tree, string moduleName, string filePath)
    {
      if (tree == null)
        throw new ArgumentNullException(nameof(tree));
      ModuleName = moduleName;

      // Генерация HTML
      string htmlContent = GenerateHtml(tree);

      // Запись в файл
      File.WriteAllText(filePath, htmlContent);
    }

    private string GenerateHtml(Node tree)
    {
      var html = new StringBuilder();

      // Структура HTML-документа
      html.Append("<!DOCTYPE html>");
      html.Append("<html lang=\"en\">");
      html.Append("<head>");
      html.Append("<meta charset=\"UTF-8\">");
      html.Append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
      html.Append("<title>Semantic Tree</title>");

      // Стили
      html.Append("<style>");
      html.Append(@"
                body {
                    font-family: 'Arial', sans-serif;
                    margin: 0;
                    padding: 0;
                    background-color: #f8f9fa;
                    color: #333;
                }
                header {
                    background-color: #343a40;
                    color: #fff;
                    padding: 20px;
                    text-align: center;
                    font-size: 1.5em;
                }
                .container {
                    margin: 20px auto;
                    max-width: 800px;
                    background: #fff;
                    border-radius: 8px;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                    padding: 20px;
                }
                ul {
                    list-style: none;
                    padding-left: 20px;
                }
                li {
                    position: relative;
                    padding: 10px;
                    margin: 5px 0;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    background: #f9f9f9;
                    transition: background 0.3s;
                }
                li:hover {
                    background: #f1f1f1;
                }
                .toggle {
                    display: inline-block;
                    cursor: pointer;
                    margin-right: 5px;
                    color: #888;
                    font-size: 0.8em;
                }
                .toggle::before {
                    content: '▶';
                    transition: transform 0.3s;
                }
                .collapsed > .toggle::before {
                    transform: rotate(90deg);
                }
                li.collapsed > ul {
                    display: none;
                }
                .node-name {
                    font-weight: bold;
                    color: #007bff;
                }
                .node-location {
                    color: #28a745;
                    font-style: italic;
                    margin-left: 10px;
                }
                footer {
                    text-align: center;
                    margin-top: 20px;
                    font-size: 0.9em;
                    color: #aaa;
                }
            ");
      html.Append("</style>");
      html.Append("</head>");
      html.Append("<body>");

      // Заголовок
      html.Append($"<header>Semantic Tree '{ModuleName}'</header>");
      html.Append("<div class='container'>");
      html.Append("<p>Click on the ▶ icon to expand or collapse nodes.</p>");

      // Генерация дерева
      html.Append("<div class='tree'>");
      AppendNodeHtml(tree, html);
      html.Append("</div>");
      html.Append("</div>");

      // Футер
      html.Append("<footer>Generated by LCCompiler</footer>");

      // Скрипт
      html.Append("<script>");
      html.Append(@"
                document.querySelectorAll('.toggle').forEach(function(toggle) {
                    toggle.addEventListener('click', function(event) {
                        event.stopPropagation();
                        const parent = this.parentNode;
                        parent.classList.toggle('collapsed');
                    });
                });
            ");
      html.Append("</script>");

      html.Append("</body>");
      html.Append("</html>");

      return html.ToString();
    }

    private void AppendNodeHtml(Node node, StringBuilder html)
    {
      if (node == null)
        return;

      bool hasChildren = node.CountChildrens > 0;

      html.Append("<ul>");

      string nodeText = node.ToString();
      string locationText = "";

      // Если узел поддерживает информацию о местоположении
      if (node is ILocateElement locatedNode)
      {
        LocateElement locate = locatedNode.Locate;
        if (locate != null)
        {
          locationText = string.Format(" [LINE: {0}, {1}-{2}]", locate.Line, locate.StartColumn, locate.EndColumn);
        }
      }

      // Узел дерева с выделением имени и местоположения
      html.Append($"<li class='{(hasChildren ? "collapsed" : "")}'>");
      if (hasChildren)
      {
        html.Append("<span class='toggle'></span>");
      }
      html.Append($"<span class='node-name'>{System.Net.WebUtility.HtmlEncode(nodeText)}</span>");
      if (!string.IsNullOrEmpty(locationText))
      {
        html.Append($"<span class='node-location'>{System.Net.WebUtility.HtmlEncode(locationText)}</span>");
      }

      // Рекурсивно добавляем дочерние узлы
      if (hasChildren)
      {
        for (int i = 0; i < node.CountChildrens; i++)
        {
          AppendNodeHtml(node.GetChild(i), html);
        }
      }

      html.Append("</li>");
      html.Append("</ul>");
    }
  }
}
