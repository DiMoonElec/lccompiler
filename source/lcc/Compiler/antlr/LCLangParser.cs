//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LCLang.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class LCLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SByte=1, Short=2, Int=3, Long=4, Byte=5, UShort=6, UInt=7, ULong=8, Float=9, 
		Double=10, Bool=11, Void=12, False=13, True=14, Break=15, Case=16, Const=17, 
		Continue=18, Default=19, Do=20, Else=21, For=22, Goto=23, If=24, Native=25, 
		Return=26, Struct=27, Switch=28, Use=29, While=30, Underscore=31, LeftParen=32, 
		RightParen=33, LeftBracket=34, RightBracket=35, LeftBrace=36, RightBrace=37, 
		Less=38, LessEqual=39, Greater=40, GreaterEqual=41, LeftShift=42, RightShift=43, 
		Plus=44, PlusPlus=45, Minus=46, MinusMinus=47, Star=48, Div=49, Mod=50, 
		And=51, Or=52, AndAnd=53, OrOr=54, Caret=55, Not=56, Tilde=57, Semi=58, 
		Comma=59, Colon=60, Ref=61, Assign=62, StarAssign=63, DivAssign=64, ModAssign=65, 
		PlusAssign=66, MinusAssign=67, LeftShiftAssign=68, RightShiftAssign=69, 
		AndAssign=70, XorAssign=71, OrAssign=72, Equal=73, NotEqual=74, Dot=75, 
		Arrow=76, At=77, Identifier=78, BinaryConstant=79, DecimalConstant=80, 
		OctalConstant=81, HexadecimalConstant=82, FloatingConstant=83, DigitSequence=84, 
		CharacterConstant=85, StringLiteral=86, Whitespace=87, Newline=88, BlockComment=89, 
		LineComment=90;
	public const int
		RULE_compilationUnit = 0, RULE_compilationUnitElement = 1, RULE_functionDeclaration = 2, 
		RULE_functionParameters = 3, RULE_functionParameter = 4, RULE_compoundStatement = 5, 
		RULE_blockItemList = 6, RULE_blockItem = 7, RULE_statement = 8, RULE_labeledStatement = 9, 
		RULE_labelCase = 10, RULE_labelDefault = 11, RULE_selectionStatement = 12, 
		RULE_selectionIFStatement = 13, RULE_selectionSwitchStatement = 14, RULE_iterationStatement = 15, 
		RULE_iterationWhileStatement = 16, RULE_iterationDoStatement = 17, RULE_iterationForStatement = 18, 
		RULE_forSections = 19, RULE_forInitializer = 20, RULE_forInitializerItem = 21, 
		RULE_forCondition = 22, RULE_forIteratorExpression = 23, RULE_forIteratorExpressionItem = 24, 
		RULE_jumpStatement = 25, RULE_jumpContinue = 26, RULE_jumpBreak = 27, 
		RULE_jumpReturn = 28, RULE_useDirectives = 29, RULE_useDirective = 30, 
		RULE_objectPath = 31, RULE_structDeclarationStatement = 32, RULE_structDeclaration = 33, 
		RULE_structDeclarationElements = 34, RULE_structDeclarationElement = 35, 
		RULE_varableDeclarationStatement = 36, RULE_varableDeclaration = 37, RULE_attributeSpecifier = 38, 
		RULE_varableDeclarator = 39, RULE_initializer = 40, RULE_groupInitializer = 41, 
		RULE_groupInitializerItems = 42, RULE_groupInitializerItem = 43, RULE_lcStructElementType = 44, 
		RULE_lcFunctionParamType = 45, RULE_lcVariableType = 46, RULE_lcPrimitiveType = 47, 
		RULE_lcRefArrayPrimitiveType = 48, RULE_lcArrayPrimitiveType = 49, RULE_lcUserType = 50, 
		RULE_arrayIndexer = 51, RULE_expressionSequence = 52, RULE_expressionStatement = 53, 
		RULE_expression = 54, RULE_varMemoryLocation = 55, RULE_baseConstant = 56, 
		RULE_constant = 57, RULE_intConstant = 58, RULE_floatConstant = 59;
	public static readonly string[] ruleNames = {
		"compilationUnit", "compilationUnitElement", "functionDeclaration", "functionParameters", 
		"functionParameter", "compoundStatement", "blockItemList", "blockItem", 
		"statement", "labeledStatement", "labelCase", "labelDefault", "selectionStatement", 
		"selectionIFStatement", "selectionSwitchStatement", "iterationStatement", 
		"iterationWhileStatement", "iterationDoStatement", "iterationForStatement", 
		"forSections", "forInitializer", "forInitializerItem", "forCondition", 
		"forIteratorExpression", "forIteratorExpressionItem", "jumpStatement", 
		"jumpContinue", "jumpBreak", "jumpReturn", "useDirectives", "useDirective", 
		"objectPath", "structDeclarationStatement", "structDeclaration", "structDeclarationElements", 
		"structDeclarationElement", "varableDeclarationStatement", "varableDeclaration", 
		"attributeSpecifier", "varableDeclarator", "initializer", "groupInitializer", 
		"groupInitializerItems", "groupInitializerItem", "lcStructElementType", 
		"lcFunctionParamType", "lcVariableType", "lcPrimitiveType", "lcRefArrayPrimitiveType", 
		"lcArrayPrimitiveType", "lcUserType", "arrayIndexer", "expressionSequence", 
		"expressionStatement", "expression", "varMemoryLocation", "baseConstant", 
		"constant", "intConstant", "floatConstant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'sbyte'", "'short'", "'int'", "'long'", "'byte'", "'ushort'", "'uint'", 
		"'ulong'", "'float'", "'double'", "'bool'", "'void'", "'false'", "'true'", 
		"'break'", "'case'", "'const'", "'continue'", "'default'", "'do'", "'else'", 
		"'for'", "'goto'", "'if'", "'native'", "'return'", "'struct'", "'switch'", 
		"'use'", "'while'", "'_'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", 
		"'<='", "'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", 
		"'/'", "'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "';'", 
		"','", "':'", "'ref'", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'.'", "'->'", 
		"'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SByte", "Short", "Int", "Long", "Byte", "UShort", "UInt", "ULong", 
		"Float", "Double", "Bool", "Void", "False", "True", "Break", "Case", "Const", 
		"Continue", "Default", "Do", "Else", "For", "Goto", "If", "Native", "Return", 
		"Struct", "Switch", "Use", "While", "Underscore", "LeftParen", "RightParen", 
		"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "LessEqual", 
		"Greater", "GreaterEqual", "LeftShift", "RightShift", "Plus", "PlusPlus", 
		"Minus", "MinusMinus", "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", 
		"Caret", "Not", "Tilde", "Semi", "Comma", "Colon", "Ref", "Assign", "StarAssign", 
		"DivAssign", "ModAssign", "PlusAssign", "MinusAssign", "LeftShiftAssign", 
		"RightShiftAssign", "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
		"Dot", "Arrow", "At", "Identifier", "BinaryConstant", "DecimalConstant", 
		"OctalConstant", "HexadecimalConstant", "FloatingConstant", "DigitSequence", 
		"CharacterConstant", "StringLiteral", "Whitespace", "Newline", "BlockComment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LCLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LCLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LCLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LCLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LCLangParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectivesContext useDirectives() {
			return GetRuleContext<UseDirectivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompilationUnitElementContext[] compilationUnitElement() {
			return GetRuleContexts<CompilationUnitElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompilationUnitElementContext compilationUnitElement(int i) {
			return GetRuleContext<CompilationUnitElementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Use) {
				{
				State = 120;
				useDirectives();
				}
			}

			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SByte) | (1L << Short) | (1L << Int) | (1L << Long) | (1L << Byte) | (1L << UShort) | (1L << UInt) | (1L << ULong) | (1L << Float) | (1L << Double) | (1L << Bool) | (1L << Void) | (1L << Struct))) != 0) || _la==Identifier) {
				{
				{
				State = 123;
				compilationUnitElement();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 129;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationUnitElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarableDeclarationStatementContext varableDeclarationStatement() {
			return GetRuleContext<VarableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationStatementContext structDeclarationStatement() {
			return GetRuleContext<StructDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public CompilationUnitElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnitElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitElementContext compilationUnitElement() {
		CompilationUnitElementContext _localctx = new CompilationUnitElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_compilationUnitElement);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				varableDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				structDeclarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LcPrimitiveTypeContext lcPrimitiveType() {
			return GetRuleContext<LcPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LCLangParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(LCLangParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(LCLangParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			lcPrimitiveType();
			State = 137;
			Match(Identifier);
			State = 138;
			Match(LeftParen);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SByte) | (1L << Short) | (1L << Int) | (1L << Long) | (1L << Byte) | (1L << UShort) | (1L << UInt) | (1L << ULong) | (1L << Float) | (1L << Double) | (1L << Bool) | (1L << Void))) != 0) || _la==Identifier) {
				{
				State = 139;
				functionParameters();
				}
			}

			State = 142;
			Match(RightParen);
			State = 143;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LCLangParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LCLangParser.Comma, i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			functionParameter();
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 146;
				Match(Comma);
				State = 147;
				functionParameter();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LcFunctionParamTypeContext lcFunctionParamType() {
			return GetRuleContext<LcFunctionParamTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LCLangParser.Identifier, 0); }
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			lcFunctionParamType();
			State = 154;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(LCLangParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(LCLangParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(LeftBrace);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SByte) | (1L << Short) | (1L << Int) | (1L << Long) | (1L << Byte) | (1L << UShort) | (1L << UInt) | (1L << ULong) | (1L << Float) | (1L << Double) | (1L << Bool) | (1L << Void) | (1L << False) | (1L << True) | (1L << Break) | (1L << Case) | (1L << Continue) | (1L << Default) | (1L << Do) | (1L << For) | (1L << If) | (1L << Return) | (1L << Switch) | (1L << While) | (1L << LeftParen) | (1L << LeftBrace) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Not) | (1L << Tilde) | (1L << Semi))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (Identifier - 78)) | (1L << (BinaryConstant - 78)) | (1L << (DecimalConstant - 78)) | (1L << (OctalConstant - 78)) | (1L << (HexadecimalConstant - 78)) | (1L << (FloatingConstant - 78)))) != 0)) {
				{
				State = 157;
				blockItemList();
				}
			}

			State = 160;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockItemListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockItemContext[] blockItem() {
			return GetRuleContexts<BlockItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockItemContext blockItem(int i) {
			return GetRuleContext<BlockItemContext>(i);
		}
		public BlockItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItemList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemListContext blockItemList() {
		BlockItemListContext _localctx = new BlockItemListContext(Context, State);
		EnterRule(_localctx, 12, RULE_blockItemList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 162;
				blockItem();
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SByte) | (1L << Short) | (1L << Int) | (1L << Long) | (1L << Byte) | (1L << UShort) | (1L << UInt) | (1L << ULong) | (1L << Float) | (1L << Double) | (1L << Bool) | (1L << Void) | (1L << False) | (1L << True) | (1L << Break) | (1L << Case) | (1L << Continue) | (1L << Default) | (1L << Do) | (1L << For) | (1L << If) | (1L << Return) | (1L << Switch) | (1L << While) | (1L << LeftParen) | (1L << LeftBrace) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Not) | (1L << Tilde) | (1L << Semi))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (Identifier - 78)) | (1L << (BinaryConstant - 78)) | (1L << (DecimalConstant - 78)) | (1L << (OctalConstant - 78)) | (1L << (HexadecimalConstant - 78)) | (1L << (FloatingConstant - 78)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarableDeclarationStatementContext varableDeclarationStatement() {
			return GetRuleContext<VarableDeclarationStatementContext>(0);
		}
		public BlockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemContext blockItem() {
		BlockItemContext _localctx = new BlockItemContext(Context, State);
		EnterRule(_localctx, 14, RULE_blockItem);
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				varableDeclarationStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
			case Default:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171;
				labeledStatement();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172;
				compoundStatement();
				}
				break;
			case False:
			case True:
			case LeftParen:
			case Plus:
			case PlusPlus:
			case Minus:
			case MinusMinus:
			case Not:
			case Tilde:
			case Semi:
			case Identifier:
			case BinaryConstant:
			case DecimalConstant:
			case OctalConstant:
			case HexadecimalConstant:
			case FloatingConstant:
				EnterOuterAlt(_localctx, 3);
				{
				State = 173;
				expressionStatement();
				}
				break;
			case If:
			case Switch:
				EnterOuterAlt(_localctx, 4);
				{
				State = 174;
				selectionStatement();
				}
				break;
			case Do:
			case For:
			case While:
				EnterOuterAlt(_localctx, 5);
				{
				State = 175;
				iterationStatement();
				}
				break;
			case Break:
			case Continue:
			case Return:
				EnterOuterAlt(_localctx, 6);
				{
				State = 176;
				jumpStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelCaseContext labelCase() {
			return GetRuleContext<LabelCaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDefaultContext labelDefault() {
			return GetRuleContext<LabelDefaultContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_labeledStatement);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179;
				labelCase();
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				labelDefault();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(LCLangParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LCLangParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabelCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelCaseContext labelCase() {
		LabelCaseContext _localctx = new LabelCaseContext(Context, State);
		EnterRule(_localctx, 20, RULE_labelCase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(Case);
			State = 184;
			expression(0);
			State = 185;
			Match(Colon);
			State = 186;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(LCLangParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LCLangParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabelDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDefaultContext labelDefault() {
		LabelDefaultContext _localctx = new LabelDefaultContext(Context, State);
		EnterRule(_localctx, 22, RULE_labelDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(Default);
			State = 189;
			Match(Colon);
			State = 190;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectionIFStatementContext selectionIFStatement() {
			return GetRuleContext<SelectionIFStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionSwitchStatementContext selectionSwitchStatement() {
			return GetRuleContext<SelectionSwitchStatementContext>(0);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_selectionStatement);
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				selectionIFStatement();
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				selectionSwitchStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionIFStatementContext : ParserRuleContext {
		public ExpressionContext condition;
		public StatementContext iftrue;
		public StatementContext iffalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(LCLangParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(LCLangParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(LCLangParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(LCLangParser.Else, 0); }
		public SelectionIFStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionIFStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionIFStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionIFStatementContext selectionIFStatement() {
		SelectionIFStatementContext _localctx = new SelectionIFStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_selectionIFStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(If);
			State = 197;
			Match(LeftParen);
			State = 198;
			_localctx.condition = expression(0);
			State = 199;
			Match(RightParen);
			State = 200;
			_localctx.iftrue = statement();
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 201;
				Match(Else);
				State = 202;
				_localctx.iffalse = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionSwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(LCLangParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(LCLangParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(LCLangParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public SelectionSwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionSwitchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionSwitchStatementContext selectionSwitchStatement() {
		SelectionSwitchStatementContext _localctx = new SelectionSwitchStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_selectionSwitchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(Switch);
			State = 206;
			Match(LeftParen);
			State = 207;
			expression(0);
			State = 208;
			Match(RightParen);
			State = 209;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IterationWhileStatementContext iterationWhileStatement() {
			return GetRuleContext<IterationWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationDoStatementContext iterationDoStatement() {
			return GetRuleContext<IterationDoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationForStatementContext iterationForStatement() {
			return GetRuleContext<IterationForStatementContext>(0);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_iterationStatement);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case While:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211;
				iterationWhileStatement();
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212;
				iterationDoStatement();
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 3);
				{
				State = 213;
				iterationForStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationWhileStatementContext : ParserRuleContext {
		public ExpressionContext condition;
		public StatementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(LCLangParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(LCLangParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(LCLangParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IterationWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationWhileStatementContext iterationWhileStatement() {
		IterationWhileStatementContext _localctx = new IterationWhileStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_iterationWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(While);
			State = 217;
			Match(LeftParen);
			State = 218;
			_localctx.condition = expression(0);
			State = 219;
			Match(RightParen);
			State = 220;
			_localctx.body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationDoStatementContext : ParserRuleContext {
		public StatementContext body;
		public ExpressionContext condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(LCLangParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(LCLangParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(LCLangParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(LCLangParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(LCLangParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IterationDoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationDoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationDoStatementContext iterationDoStatement() {
		IterationDoStatementContext _localctx = new IterationDoStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_iterationDoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(Do);
			State = 223;
			_localctx.body = statement();
			State = 224;
			Match(While);
			State = 225;
			Match(LeftParen);
			State = 226;
			_localctx.condition = expression(0);
			State = 227;
			Match(RightParen);
			State = 228;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationForStatementContext : ParserRuleContext {
		public ForSectionsContext condition;
		public StatementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(LCLangParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(LCLangParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(LCLangParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForSectionsContext forSections() {
			return GetRuleContext<ForSectionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IterationForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationForStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationForStatementContext iterationForStatement() {
		IterationForStatementContext _localctx = new IterationForStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_iterationForStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(For);
			State = 231;
			Match(LeftParen);
			State = 232;
			_localctx.condition = forSections();
			State = 233;
			Match(RightParen);
			State = 234;
			_localctx.body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForSectionsContext : ParserRuleContext {
		public ForInitializerContext exprInit;
		public ForConditionContext exprCond;
		public ForIteratorExpressionContext exprLoop;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(LCLangParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(LCLangParser.Semi, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitializerContext forInitializer() {
			return GetRuleContext<ForInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForIteratorExpressionContext forIteratorExpression() {
			return GetRuleContext<ForIteratorExpressionContext>(0);
		}
		public ForSectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forSections; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForSections(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForSectionsContext forSections() {
		ForSectionsContext _localctx = new ForSectionsContext(Context, State);
		EnterRule(_localctx, 38, RULE_forSections);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SByte) | (1L << Short) | (1L << Int) | (1L << Long) | (1L << Byte) | (1L << UShort) | (1L << UInt) | (1L << ULong) | (1L << Float) | (1L << Double) | (1L << Bool) | (1L << Void) | (1L << False) | (1L << True) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (Identifier - 78)) | (1L << (BinaryConstant - 78)) | (1L << (DecimalConstant - 78)) | (1L << (OctalConstant - 78)) | (1L << (HexadecimalConstant - 78)) | (1L << (FloatingConstant - 78)))) != 0)) {
				{
				State = 236;
				_localctx.exprInit = forInitializer();
				}
			}

			State = 239;
			Match(Semi);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << False) | (1L << True) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (Identifier - 78)) | (1L << (BinaryConstant - 78)) | (1L << (DecimalConstant - 78)) | (1L << (OctalConstant - 78)) | (1L << (HexadecimalConstant - 78)) | (1L << (FloatingConstant - 78)))) != 0)) {
				{
				State = 240;
				_localctx.exprCond = forCondition();
				}
			}

			State = 243;
			Match(Semi);
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << False) | (1L << True) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (Identifier - 78)) | (1L << (BinaryConstant - 78)) | (1L << (DecimalConstant - 78)) | (1L << (OctalConstant - 78)) | (1L << (HexadecimalConstant - 78)) | (1L << (FloatingConstant - 78)))) != 0)) {
				{
				State = 244;
				_localctx.exprLoop = forIteratorExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForInitializerItemContext[] forInitializerItem() {
			return GetRuleContexts<ForInitializerItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitializerItemContext forInitializerItem(int i) {
			return GetRuleContext<ForInitializerItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(LCLangParser.Comma, 0); }
		public ForInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitializerContext forInitializer() {
		ForInitializerContext _localctx = new ForInitializerContext(Context, State);
		EnterRule(_localctx, 40, RULE_forInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			forInitializerItem();
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 248;
				Match(Comma);
				State = 249;
				forInitializerItem();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitializerItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarableDeclarationContext varableDeclaration() {
			return GetRuleContext<VarableDeclarationContext>(0);
		}
		public ForInitializerItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitializerItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInitializerItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitializerItemContext forInitializerItem() {
		ForInitializerItemContext _localctx = new ForInitializerItemContext(Context, State);
		EnterRule(_localctx, 42, RULE_forInitializerItem);
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 252;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				varableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(Context, State);
		EnterRule(_localctx, 44, RULE_forCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIteratorExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForIteratorExpressionItemContext[] forIteratorExpressionItem() {
			return GetRuleContexts<ForIteratorExpressionItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForIteratorExpressionItemContext forIteratorExpressionItem(int i) {
			return GetRuleContext<ForIteratorExpressionItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(LCLangParser.Comma, 0); }
		public ForIteratorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIteratorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIteratorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIteratorExpressionContext forIteratorExpression() {
		ForIteratorExpressionContext _localctx = new ForIteratorExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_forIteratorExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			forIteratorExpressionItem();
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 259;
				Match(Comma);
				State = 260;
				forIteratorExpressionItem();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIteratorExpressionItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForIteratorExpressionItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIteratorExpressionItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIteratorExpressionItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIteratorExpressionItemContext forIteratorExpressionItem() {
		ForIteratorExpressionItemContext _localctx = new ForIteratorExpressionItemContext(Context, State);
		EnterRule(_localctx, 48, RULE_forIteratorExpressionItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(LCLangParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JumpContinueContext jumpContinue() {
			return GetRuleContext<JumpContinueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpBreakContext jumpBreak() {
			return GetRuleContext<JumpBreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpReturnContext jumpReturn() {
			return GetRuleContext<JumpReturnContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_jumpStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Continue:
				{
				State = 265;
				jumpContinue();
				}
				break;
			case Break:
				{
				State = 266;
				jumpBreak();
				}
				break;
			case Return:
				{
				State = 267;
				jumpReturn();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 270;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpContinueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(LCLangParser.Continue, 0); }
		public JumpContinueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpContinue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpContinue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpContinueContext jumpContinue() {
		JumpContinueContext _localctx = new JumpContinueContext(Context, State);
		EnterRule(_localctx, 52, RULE_jumpContinue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(Continue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpBreakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(LCLangParser.Break, 0); }
		public JumpBreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpBreak; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpBreakContext jumpBreak() {
		JumpBreakContext _localctx = new JumpBreakContext(Context, State);
		EnterRule(_localctx, 54, RULE_jumpBreak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(Break);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(LCLangParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpReturn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpReturnContext jumpReturn() {
		JumpReturnContext _localctx = new JumpReturnContext(Context, State);
		EnterRule(_localctx, 56, RULE_jumpReturn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(Return);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << False) | (1L << True) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (Identifier - 78)) | (1L << (BinaryConstant - 78)) | (1L << (DecimalConstant - 78)) | (1L << (OctalConstant - 78)) | (1L << (HexadecimalConstant - 78)) | (1L << (FloatingConstant - 78)))) != 0)) {
				{
				State = 277;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseDirectivesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		public UseDirectivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useDirectives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseDirectives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseDirectivesContext useDirectives() {
		UseDirectivesContext _localctx = new UseDirectivesContext(Context, State);
		EnterRule(_localctx, 58, RULE_useDirectives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 280;
				useDirective();
				}
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Use );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Use() { return GetToken(LCLangParser.Use, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(LCLangParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(LCLangParser.Semi, 0); }
		public UseDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseDirectiveContext useDirective() {
		UseDirectiveContext _localctx = new UseDirectiveContext(Context, State);
		EnterRule(_localctx, 60, RULE_useDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(Use);
			State = 286;
			Match(StringLiteral);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Semi) {
				{
				State = 287;
				Match(Semi);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LCLangParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LCLangParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(LCLangParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(LCLangParser.Dot, i);
		}
		public ObjectPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectPathContext objectPath() {
		ObjectPathContext _localctx = new ObjectPathContext(Context, State);
		EnterRule(_localctx, 62, RULE_objectPath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			Match(Identifier);
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 291;
				Match(Dot);
				State = 292;
				Match(Identifier);
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(LCLangParser.Semi, 0); }
		public StructDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationStatementContext structDeclarationStatement() {
		StructDeclarationStatementContext _localctx = new StructDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_structDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			structDeclaration();
			State = 299;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(LCLangParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LCLangParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(LCLangParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationElementsContext structDeclarationElements() {
			return GetRuleContext<StructDeclarationElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(LCLangParser.RightBrace, 0); }
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_structDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(Struct);
			State = 302;
			Match(Identifier);
			State = 303;
			Match(LeftBrace);
			State = 304;
			structDeclarationElements();
			State = 305;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationElementContext[] structDeclarationElement() {
			return GetRuleContexts<StructDeclarationElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationElementContext structDeclarationElement(int i) {
			return GetRuleContext<StructDeclarationElementContext>(i);
		}
		public StructDeclarationElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarationElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclarationElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationElementsContext structDeclarationElements() {
		StructDeclarationElementsContext _localctx = new StructDeclarationElementsContext(Context, State);
		EnterRule(_localctx, 68, RULE_structDeclarationElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 307;
				structDeclarationElement();
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SByte) | (1L << Short) | (1L << Int) | (1L << Long) | (1L << Byte) | (1L << UShort) | (1L << UInt) | (1L << ULong) | (1L << Float) | (1L << Double) | (1L << Bool) | (1L << Void))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LcStructElementTypeContext lcStructElementType() {
			return GetRuleContext<LcStructElementTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LCLangParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(LCLangParser.Semi, 0); }
		public StructDeclarationElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarationElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclarationElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationElementContext structDeclarationElement() {
		StructDeclarationElementContext _localctx = new StructDeclarationElementContext(Context, State);
		EnterRule(_localctx, 70, RULE_structDeclarationElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			lcStructElementType();
			State = 313;
			Match(Identifier);
			State = 314;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarableDeclarationContext varableDeclaration() {
			return GetRuleContext<VarableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(LCLangParser.Semi, 0); }
		public VarableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarableDeclarationStatementContext varableDeclarationStatement() {
		VarableDeclarationStatementContext _localctx = new VarableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_varableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			varableDeclaration();
			State = 317;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarableDeclaratorContext varableDeclarator() {
			return GetRuleContext<VarableDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(LCLangParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierContext attributeSpecifier() {
			return GetRuleContext<AttributeSpecifierContext>(0);
		}
		public VarableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarableDeclarationContext varableDeclaration() {
		VarableDeclarationContext _localctx = new VarableDeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_varableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			varableDeclarator();
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 320;
				Match(Assign);
				State = 321;
				initializer();
				}
			}

			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 324;
				attributeSpecifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At() { return GetToken(LCLangParser.At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(LCLangParser.StringLiteral, 0); }
		public AttributeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeSpecifierContext attributeSpecifier() {
		AttributeSpecifierContext _localctx = new AttributeSpecifierContext(Context, State);
		EnterRule(_localctx, 76, RULE_attributeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			Match(At);
			State = 328;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LcVariableTypeContext lcVariableType() {
			return GetRuleContext<LcVariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LCLangParser.Identifier, 0); }
		public VarableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarableDeclaratorContext varableDeclarator() {
		VarableDeclaratorContext _localctx = new VarableDeclaratorContext(Context, State);
		EnterRule(_localctx, 78, RULE_varableDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			lcVariableType();
			State = 331;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 80, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(LCLangParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupInitializerItemsContext groupInitializerItems() {
			return GetRuleContext<GroupInitializerItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(LCLangParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(LCLangParser.Comma, 0); }
		public GroupInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupInitializerContext groupInitializer() {
		GroupInitializerContext _localctx = new GroupInitializerContext(Context, State);
		EnterRule(_localctx, 82, RULE_groupInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			Match(LeftBrace);
			State = 336;
			groupInitializerItems();
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 337;
				Match(Comma);
				}
			}

			State = 340;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupInitializerItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupInitializerItemContext[] groupInitializerItem() {
			return GetRuleContexts<GroupInitializerItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupInitializerItemContext groupInitializerItem(int i) {
			return GetRuleContext<GroupInitializerItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LCLangParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LCLangParser.Comma, i);
		}
		public GroupInitializerItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupInitializerItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupInitializerItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupInitializerItemsContext groupInitializerItems() {
		GroupInitializerItemsContext _localctx = new GroupInitializerItemsContext(Context, State);
		EnterRule(_localctx, 84, RULE_groupInitializerItems);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			groupInitializerItem();
			State = 347;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 343;
					Match(Comma);
					State = 344;
					groupInitializerItem();
					}
					} 
				}
				State = 349;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupInitializerItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GroupInitializerItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupInitializerItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupInitializerItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupInitializerItemContext groupInitializerItem() {
		GroupInitializerItemContext _localctx = new GroupInitializerItemContext(Context, State);
		EnterRule(_localctx, 86, RULE_groupInitializerItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LcStructElementTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LcPrimitiveTypeContext lcPrimitiveType() {
			return GetRuleContext<LcPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LcArrayPrimitiveTypeContext lcArrayPrimitiveType() {
			return GetRuleContext<LcArrayPrimitiveTypeContext>(0);
		}
		public LcStructElementTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lcStructElementType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLcStructElementType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LcStructElementTypeContext lcStructElementType() {
		LcStructElementTypeContext _localctx = new LcStructElementTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_lcStructElementType);
		try {
			State = 354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				lcPrimitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353;
				lcArrayPrimitiveType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LcFunctionParamTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LcPrimitiveTypeContext lcPrimitiveType() {
			return GetRuleContext<LcPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LcRefArrayPrimitiveTypeContext lcRefArrayPrimitiveType() {
			return GetRuleContext<LcRefArrayPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LcUserTypeContext lcUserType() {
			return GetRuleContext<LcUserTypeContext>(0);
		}
		public LcFunctionParamTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lcFunctionParamType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLcFunctionParamType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LcFunctionParamTypeContext lcFunctionParamType() {
		LcFunctionParamTypeContext _localctx = new LcFunctionParamTypeContext(Context, State);
		EnterRule(_localctx, 90, RULE_lcFunctionParamType);
		try {
			State = 359;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 356;
				lcPrimitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357;
				lcRefArrayPrimitiveType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 358;
				lcUserType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LcVariableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LcPrimitiveTypeContext lcPrimitiveType() {
			return GetRuleContext<LcPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LcArrayPrimitiveTypeContext lcArrayPrimitiveType() {
			return GetRuleContext<LcArrayPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LcUserTypeContext lcUserType() {
			return GetRuleContext<LcUserTypeContext>(0);
		}
		public LcVariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lcVariableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLcVariableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LcVariableTypeContext lcVariableType() {
		LcVariableTypeContext _localctx = new LcVariableTypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_lcVariableType);
		try {
			State = 364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361;
				lcPrimitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362;
				lcArrayPrimitiveType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 363;
				lcUserType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LcPrimitiveTypeContext : ParserRuleContext {
		public IToken TypeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SByte() { return GetToken(LCLangParser.SByte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(LCLangParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(LCLangParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(LCLangParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Byte() { return GetToken(LCLangParser.Byte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UShort() { return GetToken(LCLangParser.UShort, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt() { return GetToken(LCLangParser.UInt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULong() { return GetToken(LCLangParser.ULong, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(LCLangParser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(LCLangParser.Double, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(LCLangParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(LCLangParser.Void, 0); }
		public LcPrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lcPrimitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLcPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LcPrimitiveTypeContext lcPrimitiveType() {
		LcPrimitiveTypeContext _localctx = new LcPrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_lcPrimitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			_localctx.TypeName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SByte) | (1L << Short) | (1L << Int) | (1L << Long) | (1L << Byte) | (1L << UShort) | (1L << UInt) | (1L << ULong) | (1L << Float) | (1L << Double) | (1L << Bool) | (1L << Void))) != 0)) ) {
				_localctx.TypeName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LcRefArrayPrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LcPrimitiveTypeContext lcPrimitiveType() {
			return GetRuleContext<LcPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(LCLangParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(LCLangParser.RightBracket, 0); }
		public LcRefArrayPrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lcRefArrayPrimitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLcRefArrayPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LcRefArrayPrimitiveTypeContext lcRefArrayPrimitiveType() {
		LcRefArrayPrimitiveTypeContext _localctx = new LcRefArrayPrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 96, RULE_lcRefArrayPrimitiveType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			lcPrimitiveType();
			State = 369;
			Match(LeftBracket);
			State = 370;
			Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LcArrayPrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LcPrimitiveTypeContext lcPrimitiveType() {
			return GetRuleContext<LcPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(LCLangParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntConstantContext intConstant() {
			return GetRuleContext<IntConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(LCLangParser.RightBracket, 0); }
		public LcArrayPrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lcArrayPrimitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLcArrayPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LcArrayPrimitiveTypeContext lcArrayPrimitiveType() {
		LcArrayPrimitiveTypeContext _localctx = new LcArrayPrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_lcArrayPrimitiveType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			lcPrimitiveType();
			State = 373;
			Match(LeftBracket);
			State = 374;
			intConstant();
			State = 375;
			Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LcUserTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LCLangParser.Identifier, 0); }
		public LcUserTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lcUserType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLcUserType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LcUserTypeContext lcUserType() {
		LcUserTypeContext _localctx = new LcUserTypeContext(Context, State);
		EnterRule(_localctx, 100, RULE_lcUserType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(LCLangParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(LCLangParser.RightBracket, 0); }
		public ArrayIndexerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexerContext arrayIndexer() {
		ArrayIndexerContext _localctx = new ArrayIndexerContext(Context, State);
		EnterRule(_localctx, 102, RULE_arrayIndexer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(LeftBracket);
			State = 380;
			expression(0);
			State = 381;
			Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LCLangParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LCLangParser.Comma, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 104, RULE_expressionSequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			expression(0);
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 384;
				Match(Comma);
				State = 385;
				expression(0);
				}
				}
				State = 390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(LCLangParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_expressionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << False) | (1L << True) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (Identifier - 78)) | (1L << (BinaryConstant - 78)) | (1L << (DecimalConstant - 78)) | (1L << (OctalConstant - 78)) | (1L << (HexadecimalConstant - 78)) | (1L << (FloatingConstant - 78)))) != 0)) {
				{
				State = 391;
				_localctx.expr = expression(0);
				}
			}

			State = 394;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprBaseConstantContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseConstantContext baseConstant() {
			return GetRuleContext<BaseConstantContext>(0);
		}
		public ExprBaseConstantContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBaseConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprElementAccessContext : ExpressionContext {
		public ExpressionContext obj;
		public IToken objField;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(LCLangParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LCLangParser.Identifier, 0); }
		public ExprElementAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprElementAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LCLangParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(LCLangParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(LCLangParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ExprCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprPostfixContext : ExpressionContext {
		public ExpressionContext operand;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(LCLangParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(LCLangParser.MinusMinus, 0); }
		public ExprPostfixContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPostfix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprPrefixContext : ExpressionContext {
		public IToken op;
		public ExpressionContext operand;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(LCLangParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(LCLangParser.MinusMinus, 0); }
		public ExprPrefixContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LCLangParser.Identifier, 0); }
		public ExprIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprParensContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(LCLangParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(LCLangParser.RightParen, 0); }
		public ExprParensContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprTypeCastContext : ExpressionContext {
		public ExpressionContext operand;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(LCLangParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LcPrimitiveTypeContext lcPrimitiveType() {
			return GetRuleContext<LcPrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(LCLangParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprTypeCastContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprTypeCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprUnaryContext : ExpressionContext {
		public IToken op;
		public ExpressionContext operand;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(LCLangParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(LCLangParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(LCLangParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(LCLangParser.Tilde, 0); }
		public ExprUnaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIndexContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexerContext arrayIndexer() {
			return GetRuleContext<ArrayIndexerContext>(0);
		}
		public ExprIndexContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprInfixContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(LCLangParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(LCLangParser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(LCLangParser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(LCLangParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(LCLangParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShift() { return GetToken(LCLangParser.LeftShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShift() { return GetToken(LCLangParser.RightShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(LCLangParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(LCLangParser.LessEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(LCLangParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(LCLangParser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(LCLangParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(LCLangParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(LCLangParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(LCLangParser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(LCLangParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(LCLangParser.AndAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr() { return GetToken(LCLangParser.OrOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(LCLangParser.Assign, 0); }
		public ExprInfixContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprInfix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprConstantContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ExprConstantContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 108;
		EnterRecursionRule(_localctx, 108, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				_localctx = new ExprIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 397;
				Match(Identifier);
				}
				break;
			case 2:
				{
				_localctx = new ExprConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 398;
				constant();
				}
				break;
			case 3:
				{
				_localctx = new ExprBaseConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 399;
				baseConstant();
				}
				break;
			case 4:
				{
				_localctx = new ExprParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 400;
				Match(LeftParen);
				State = 401;
				expression(0);
				State = 402;
				Match(RightParen);
				}
				break;
			case 5:
				{
				_localctx = new ExprCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 404;
				Match(Identifier);
				State = 405;
				Match(LeftParen);
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << False) | (1L << True) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (Identifier - 78)) | (1L << (BinaryConstant - 78)) | (1L << (DecimalConstant - 78)) | (1L << (OctalConstant - 78)) | (1L << (HexadecimalConstant - 78)) | (1L << (FloatingConstant - 78)))) != 0)) {
					{
					State = 406;
					expressionSequence();
					}
				}

				State = 409;
				Match(RightParen);
				}
				break;
			case 6:
				{
				_localctx = new ExprPrefixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 410;
				((ExprPrefixContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PlusPlus || _la==MinusMinus) ) {
					((ExprPrefixContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 411;
				((ExprPrefixContext)_localctx).operand = expression(15);
				}
				break;
			case 7:
				{
				_localctx = new ExprUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 412;
				((ExprUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
					((ExprUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 413;
				((ExprUnaryContext)_localctx).operand = expression(14);
				}
				break;
			case 8:
				{
				_localctx = new ExprUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 414;
				((ExprUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==Not || _la==Tilde) ) {
					((ExprUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 415;
				((ExprUnaryContext)_localctx).operand = expression(13);
				}
				break;
			case 9:
				{
				_localctx = new ExprTypeCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 416;
				Match(LeftParen);
				State = 417;
				lcPrimitiveType();
				State = 418;
				Match(RightParen);
				State = 419;
				((ExprTypeCastContext)_localctx).operand = expression(12);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 465;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 463;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new ExprInfixContext(new ExpressionContext(_parentctx, _parentState));
						((ExprInfixContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 423;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 424;
						((ExprInfixContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Star) | (1L << Div) | (1L << Mod))) != 0)) ) {
							((ExprInfixContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 425;
						((ExprInfixContext)_localctx).right = expression(12);
						}
						break;
					case 2:
						{
						_localctx = new ExprInfixContext(new ExpressionContext(_parentctx, _parentState));
						((ExprInfixContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 426;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 427;
						((ExprInfixContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((ExprInfixContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 428;
						((ExprInfixContext)_localctx).right = expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExprInfixContext(new ExpressionContext(_parentctx, _parentState));
						((ExprInfixContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 429;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 430;
						((ExprInfixContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LeftShift || _la==RightShift) ) {
							((ExprInfixContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 431;
						((ExprInfixContext)_localctx).right = expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExprInfixContext(new ExpressionContext(_parentctx, _parentState));
						((ExprInfixContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 432;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 433;
						((ExprInfixContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual))) != 0)) ) {
							((ExprInfixContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 434;
						((ExprInfixContext)_localctx).right = expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExprInfixContext(new ExpressionContext(_parentctx, _parentState));
						((ExprInfixContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 435;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 436;
						((ExprInfixContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((ExprInfixContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 437;
						((ExprInfixContext)_localctx).right = expression(8);
						}
						break;
					case 6:
						{
						_localctx = new ExprInfixContext(new ExpressionContext(_parentctx, _parentState));
						((ExprInfixContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 438;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 439;
						((ExprInfixContext)_localctx).op = Match(And);
						State = 440;
						((ExprInfixContext)_localctx).right = expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ExprInfixContext(new ExpressionContext(_parentctx, _parentState));
						((ExprInfixContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 441;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 442;
						((ExprInfixContext)_localctx).op = Match(Caret);
						State = 443;
						((ExprInfixContext)_localctx).right = expression(6);
						}
						break;
					case 8:
						{
						_localctx = new ExprInfixContext(new ExpressionContext(_parentctx, _parentState));
						((ExprInfixContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 444;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 445;
						((ExprInfixContext)_localctx).op = Match(Or);
						State = 446;
						((ExprInfixContext)_localctx).right = expression(5);
						}
						break;
					case 9:
						{
						_localctx = new ExprInfixContext(new ExpressionContext(_parentctx, _parentState));
						((ExprInfixContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 447;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 448;
						((ExprInfixContext)_localctx).op = Match(AndAnd);
						State = 449;
						((ExprInfixContext)_localctx).right = expression(4);
						}
						break;
					case 10:
						{
						_localctx = new ExprInfixContext(new ExpressionContext(_parentctx, _parentState));
						((ExprInfixContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 450;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 451;
						((ExprInfixContext)_localctx).op = Match(OrOr);
						State = 452;
						((ExprInfixContext)_localctx).right = expression(3);
						}
						break;
					case 11:
						{
						_localctx = new ExprInfixContext(new ExpressionContext(_parentctx, _parentState));
						((ExprInfixContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 453;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 454;
						((ExprInfixContext)_localctx).op = Match(Assign);
						State = 455;
						((ExprInfixContext)_localctx).right = expression(2);
						}
						break;
					case 12:
						{
						_localctx = new ExprPostfixContext(new ExpressionContext(_parentctx, _parentState));
						((ExprPostfixContext)_localctx).operand = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 456;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 457;
						((ExprPostfixContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PlusPlus || _la==MinusMinus) ) {
							((ExprPostfixContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 13:
						{
						_localctx = new ExprIndexContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 458;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 459;
						arrayIndexer();
						}
						break;
					case 14:
						{
						_localctx = new ExprElementAccessContext(new ExpressionContext(_parentctx, _parentState));
						((ExprElementAccessContext)_localctx).obj = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 460;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 461;
						Match(Arrow);
						State = 462;
						((ExprElementAccessContext)_localctx).objField = Match(Identifier);
						}
						break;
					}
					} 
				}
				State = 467;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VarMemoryLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(LCLangParser.Const, 0); }
		public VarMemoryLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varMemoryLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarMemoryLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarMemoryLocationContext varMemoryLocation() {
		VarMemoryLocationContext _localctx = new VarMemoryLocationContext(Context, State);
		EnterRule(_localctx, 110, RULE_varMemoryLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			Match(Const);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(LCLangParser.False, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(LCLangParser.True, 0); }
		public BaseConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseConstantContext baseConstant() {
		BaseConstantContext _localctx = new BaseConstantContext(Context, State);
		EnterRule(_localctx, 112, RULE_baseConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			_la = TokenStream.LA(1);
			if ( !(_la==False || _la==True) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FloatConstantContext floatConstant() {
			return GetRuleContext<FloatConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntConstantContext intConstant() {
			return GetRuleContext<IntConstantContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 114, RULE_constant);
		try {
			State = 474;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FloatingConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 472;
				floatConstant();
				}
				break;
			case BinaryConstant:
			case DecimalConstant:
			case OctalConstant:
			case HexadecimalConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 473;
				intConstant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalConstant() { return GetToken(LCLangParser.DecimalConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalConstant() { return GetToken(LCLangParser.OctalConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexadecimalConstant() { return GetToken(LCLangParser.HexadecimalConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryConstant() { return GetToken(LCLangParser.BinaryConstant, 0); }
		public IntConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntConstantContext intConstant() {
		IntConstantContext _localctx = new IntConstantContext(Context, State);
		EnterRule(_localctx, 116, RULE_intConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (BinaryConstant - 79)) | (1L << (DecimalConstant - 79)) | (1L << (OctalConstant - 79)) | (1L << (HexadecimalConstant - 79)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingConstant() { return GetToken(LCLangParser.FloatingConstant, 0); }
		public FloatConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILCLangVisitor<TResult> typedVisitor = visitor as ILCLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatConstantContext floatConstant() {
		FloatConstantContext _localctx = new FloatConstantContext(Context, State);
		EnterRule(_localctx, 118, RULE_floatConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			Match(FloatingConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 54: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		case 11: return Precpred(Context, 19);
		case 12: return Precpred(Context, 17);
		case 13: return Precpred(Context, 16);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\\', '\x1E3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x3', '\x2', '\x5', '\x2', '|', '\n', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\x7F', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x82', '\v', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x89', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x8F', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', '\x97', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x9A', 
		'\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xA1', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x6', '\b', '\xA6', '\n', '\b', '\r', '\b', '\xE', '\b', '\xA7', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\xAC', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\xB4', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xB8', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\xC5', '\n', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\xCE', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xD9', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x5', '\x15', '\xF0', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\xF4', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\xF8', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\xFD', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x101', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x108', '\n', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x10F', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x119', '\n', '\x1E', '\x3', '\x1F', '\x6', '\x1F', '\x11C', 
		'\n', '\x1F', '\r', '\x1F', '\xE', '\x1F', '\x11D', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x123', '\n', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\a', '!', '\x128', '\n', '!', '\f', '!', '\xE', '!', '\x12B', 
		'\v', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x6', '$', 
		'\x137', '\n', '$', '\r', '$', '\xE', '$', '\x138', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x145', '\n', '\'', '\x3', 
		'\'', '\x5', '\'', '\x148', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x5', '+', '\x155', '\n', '+', '\x3', '+', 
		'\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\a', ',', '\x15C', '\n', 
		',', '\f', ',', '\xE', ',', '\x15F', '\v', ',', '\x3', '-', '\x3', '-', 
		'\x3', '.', '\x3', '.', '\x5', '.', '\x165', '\n', '.', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x5', '/', '\x16A', '\n', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x5', '\x30', '\x16F', '\n', '\x30', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', 
		'\x185', '\n', '\x36', '\f', '\x36', '\xE', '\x36', '\x188', '\v', '\x36', 
		'\x3', '\x37', '\x5', '\x37', '\x18B', '\n', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x5', '\x38', '\x19A', '\n', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x5', '\x38', '\x1A8', '\n', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\a', '\x38', '\x1D2', 
		'\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x1D5', '\v', '\x38', '\x3', 
		'\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', 
		'\x5', ';', '\x1DD', '\n', ';', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x2', '\x3', 'n', '>', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', '\x2', '\f', '\x3', '\x2', 
		'\x3', '\xE', '\x4', '\x2', '/', '/', '\x31', '\x31', '\x4', '\x2', '.', 
		'.', '\x30', '\x30', '\x3', '\x2', ':', ';', '\x3', '\x2', '\x32', '\x34', 
		'\x3', '\x2', ',', '-', '\x3', '\x2', '(', '+', '\x3', '\x2', 'K', 'L', 
		'\x3', '\x2', '\xF', '\x10', '\x3', '\x2', 'Q', 'T', '\x2', '\x1E9', '\x2', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x4', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x8A', '\x3', '\x2', '\x2', '\x2', '\b', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x9B', '\x3', '\x2', '\x2', '\x2', '\f', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x12', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x16', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xC4', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xCF', '\x3', '\x2', '\x2', '\x2', ' ', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xE0', '\x3', '\x2', '\x2', '\x2', '&', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xEF', '\x3', '\x2', '\x2', '\x2', '*', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x100', '\x3', '\x2', '\x2', '\x2', '.', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x109', '\x3', '\x2', '\x2', '\x2', '\x34', '\x10E', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x112', '\x3', '\x2', '\x2', '\x2', '\x38', '\x114', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x11B', '\x3', '\x2', '\x2', '\x2', '>', '\x11F', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x124', '\x3', '\x2', '\x2', '\x2', '\x42', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x136', '\x3', '\x2', '\x2', '\x2', 'H', '\x13A', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x13E', '\x3', '\x2', '\x2', '\x2', 'L', '\x141', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x14C', '\x3', '\x2', '\x2', '\x2', 'R', '\x14F', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x151', '\x3', '\x2', '\x2', '\x2', 'V', '\x158', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x164', '\x3', '\x2', '\x2', '\x2', '\\', '\x169', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x16E', '\x3', '\x2', '\x2', '\x2', '`', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x172', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x176', '\x3', '\x2', '\x2', '\x2', '\x66', '\x17B', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x17D', '\x3', '\x2', '\x2', '\x2', 'j', '\x181', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x1A7', '\x3', '\x2', '\x2', '\x2', 'p', '\x1D6', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x1D8', '\x3', '\x2', '\x2', '\x2', 't', '\x1DC', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x1E0', '\x3', '\x2', '\x2', '\x2', 'z', '|', '\x5', '<', '\x1F', 
		'\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', 
		'\x2', '|', '\x80', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\x5', '\x4', 
		'\x3', '\x2', '~', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', 
		'\x2', '\x2', '\x3', '\x84', '\x3', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x89', '\x5', 'J', '&', '\x2', '\x86', '\x89', '\x5', '\x42', '\"', '\x2', 
		'\x87', '\x89', '\x5', '\x6', '\x4', '\x2', '\x88', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x8B', '\x5', '`', '\x31', '\x2', '\x8B', '\x8C', '\a', 'P', 
		'\x2', '\x2', '\x8C', '\x8E', '\a', '\"', '\x2', '\x2', '\x8D', '\x8F', 
		'\x5', '\b', '\x5', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x91', '\a', '#', '\x2', '\x2', '\x91', '\x92', 
		'\x5', '\f', '\a', '\x2', '\x92', '\a', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x98', '\x5', '\n', '\x6', '\x2', '\x94', '\x95', '\a', '=', '\x2', '\x2', 
		'\x95', '\x97', '\x5', '\n', '\x6', '\x2', '\x96', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\t', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9C', '\x5', '\\', '/', '\x2', '\x9C', '\x9D', 
		'\a', 'P', '\x2', '\x2', '\x9D', '\v', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\xA0', '\a', '&', '\x2', '\x2', '\x9F', '\xA1', '\x5', '\xE', '\b', '\x2', 
		'\xA0', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', 
		'\a', '\'', '\x2', '\x2', '\xA3', '\r', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA6', '\x5', '\x10', '\t', '\x2', '\xA5', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAC', '\x5', '\x12', '\n', 
		'\x2', '\xAA', '\xAC', '\x5', 'J', '&', '\x2', '\xAB', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xB4', '\x5', '\x14', '\v', 
		'\x2', '\xAE', '\xB4', '\x5', '\f', '\a', '\x2', '\xAF', '\xB4', '\x5', 
		'l', '\x37', '\x2', '\xB0', '\xB4', '\x5', '\x1A', '\xE', '\x2', '\xB1', 
		'\xB4', '\x5', ' ', '\x11', '\x2', '\xB2', '\xB4', '\x5', '\x34', '\x1B', 
		'\x2', '\xB3', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB8', '\x5', '\x16', '\f', '\x2', '\xB6', 
		'\xB8', '\x5', '\x18', '\r', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', '\x12', '\x2', '\x2', '\xBA', 
		'\xBB', '\x5', 'n', '\x38', '\x2', '\xBB', '\xBC', '\a', '>', '\x2', '\x2', 
		'\xBC', '\xBD', '\x5', '\x12', '\n', '\x2', '\xBD', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xBF', '\a', '\x15', '\x2', '\x2', '\xBF', '\xC0', 
		'\a', '>', '\x2', '\x2', '\xC0', '\xC1', '\x5', '\x12', '\n', '\x2', '\xC1', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC5', '\x5', '\x1C', '\xF', 
		'\x2', '\xC3', '\xC5', '\x5', '\x1E', '\x10', '\x2', '\xC4', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\a', '\x1A', '\x2', 
		'\x2', '\xC7', '\xC8', '\a', '\"', '\x2', '\x2', '\xC8', '\xC9', '\x5', 
		'n', '\x38', '\x2', '\xC9', '\xCA', '\a', '#', '\x2', '\x2', '\xCA', '\xCD', 
		'\x5', '\x12', '\n', '\x2', '\xCB', '\xCC', '\a', '\x17', '\x2', '\x2', 
		'\xCC', '\xCE', '\x5', '\x12', '\n', '\x2', '\xCD', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x1E', '\x2', '\x2', 
		'\xD0', '\xD1', '\a', '\"', '\x2', '\x2', '\xD1', '\xD2', '\x5', 'n', 
		'\x38', '\x2', '\xD2', '\xD3', '\a', '#', '\x2', '\x2', '\xD3', '\xD4', 
		'\x5', '\f', '\a', '\x2', '\xD4', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD9', '\x5', '\"', '\x12', '\x2', '\xD6', '\xD9', '\x5', '$', 
		'\x13', '\x2', '\xD7', '\xD9', '\x5', '&', '\x14', '\x2', '\xD8', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDB', '\a', ' ', '\x2', '\x2', '\xDB', '\xDC', 
		'\a', '\"', '\x2', '\x2', '\xDC', '\xDD', '\x5', 'n', '\x38', '\x2', '\xDD', 
		'\xDE', '\a', '#', '\x2', '\x2', '\xDE', '\xDF', '\x5', '\x12', '\n', 
		'\x2', '\xDF', '#', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\a', 
		'\x16', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x12', '\n', '\x2', '\xE2', 
		'\xE3', '\a', ' ', '\x2', '\x2', '\xE3', '\xE4', '\a', '\"', '\x2', '\x2', 
		'\xE4', '\xE5', '\x5', 'n', '\x38', '\x2', '\xE5', '\xE6', '\a', '#', 
		'\x2', '\x2', '\xE6', '\xE7', '\a', '<', '\x2', '\x2', '\xE7', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xE9', '\a', '\x18', '\x2', '\x2', '\xE9', 
		'\xEA', '\a', '\"', '\x2', '\x2', '\xEA', '\xEB', '\x5', '(', '\x15', 
		'\x2', '\xEB', '\xEC', '\a', '#', '\x2', '\x2', '\xEC', '\xED', '\x5', 
		'\x12', '\n', '\x2', '\xED', '\'', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xF0', '\x5', '*', '\x16', '\x2', '\xEF', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF3', '\a', '<', '\x2', '\x2', '\xF2', 
		'\xF4', '\x5', '.', '\x18', '\x2', '\xF3', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF7', '\a', '<', '\x2', '\x2', '\xF6', 
		'\xF8', '\x5', '\x30', '\x19', '\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFC', '\x5', ',', '\x17', '\x2', '\xFA', 
		'\xFB', '\a', '=', '\x2', '\x2', '\xFB', '\xFD', '\x5', ',', '\x17', '\x2', 
		'\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\xFD', '+', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x101', 
		'\x5', 'n', '\x38', '\x2', '\xFF', '\x101', '\x5', 'L', '\'', '\x2', '\x100', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '-', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x5', 
		'n', '\x38', '\x2', '\x103', '/', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x107', '\x5', '\x32', '\x1A', '\x2', '\x105', '\x106', '\a', '=', '\x2', 
		'\x2', '\x106', '\x108', '\x5', '\x32', '\x1A', '\x2', '\x107', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x31', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x5', 
		'n', '\x38', '\x2', '\x10A', '\x33', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x10F', '\x5', '\x36', '\x1C', '\x2', '\x10C', '\x10F', '\x5', '\x38', 
		'\x1D', '\x2', '\x10D', '\x10F', '\x5', ':', '\x1E', '\x2', '\x10E', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x111', '\a', '<', '\x2', '\x2', '\x111', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\a', '\x14', '\x2', 
		'\x2', '\x113', '\x37', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', 
		'\a', '\x11', '\x2', '\x2', '\x115', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x118', '\a', '\x1C', '\x2', '\x2', '\x117', '\x119', '\x5', 
		'n', '\x38', '\x2', '\x118', '\x117', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x119', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11C', '\x5', '>', ' ', '\x2', '\x11B', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '=', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\a', 
		'\x1F', '\x2', '\x2', '\x120', '\x122', '\a', 'X', '\x2', '\x2', '\x121', 
		'\x123', '\a', '<', '\x2', '\x2', '\x122', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x122', '\x123', '\x3', '\x2', '\x2', '\x2', '\x123', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x129', '\a', 'P', '\x2', '\x2', '\x125', 
		'\x126', '\a', 'M', '\x2', '\x2', '\x126', '\x128', '\a', 'P', '\x2', 
		'\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12D', '\x5', '\x44', '#', '\x2', '\x12D', '\x12E', '\a', '<', '\x2', 
		'\x2', '\x12E', '\x43', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', 
		'\a', '\x1D', '\x2', '\x2', '\x130', '\x131', '\a', 'P', '\x2', '\x2', 
		'\x131', '\x132', '\a', '&', '\x2', '\x2', '\x132', '\x133', '\x5', '\x46', 
		'$', '\x2', '\x133', '\x134', '\a', '\'', '\x2', '\x2', '\x134', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x137', '\x5', 'H', '%', '\x2', 
		'\x136', '\x135', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x136', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x139', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x13B', '\x5', 'Z', '.', '\x2', '\x13B', '\x13C', '\a', 
		'P', '\x2', '\x2', '\x13C', '\x13D', '\a', '<', '\x2', '\x2', '\x13D', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\x5', 'L', '\'', '\x2', 
		'\x13F', '\x140', '\a', '<', '\x2', '\x2', '\x140', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x141', '\x144', '\x5', 'P', ')', '\x2', '\x142', '\x143', 
		'\a', '@', '\x2', '\x2', '\x143', '\x145', '\x5', 'R', '*', '\x2', '\x144', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x145', '\x147', '\x3', '\x2', '\x2', '\x2', '\x146', '\x148', 
		'\x5', 'N', '(', '\x2', '\x147', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x148', '\x3', '\x2', '\x2', '\x2', '\x148', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x149', '\x14A', '\a', 'O', '\x2', '\x2', '\x14A', '\x14B', 
		'\a', 'X', '\x2', '\x2', '\x14B', 'O', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x14D', '\x5', '^', '\x30', '\x2', '\x14D', '\x14E', '\a', 'P', '\x2', 
		'\x2', '\x14E', 'Q', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\x5', 
		'n', '\x38', '\x2', '\x150', 'S', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x152', '\a', '&', '\x2', '\x2', '\x152', '\x154', '\x5', 'V', ',', '\x2', 
		'\x153', '\x155', '\a', '=', '\x2', '\x2', '\x154', '\x153', '\x3', '\x2', 
		'\x2', '\x2', '\x154', '\x155', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x156', '\x157', '\a', '\'', '\x2', '\x2', 
		'\x157', 'U', '\x3', '\x2', '\x2', '\x2', '\x158', '\x15D', '\x5', 'X', 
		'-', '\x2', '\x159', '\x15A', '\a', '=', '\x2', '\x2', '\x15A', '\x15C', 
		'\x5', 'X', '-', '\x2', '\x15B', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x15C', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15B', '\x3', 
		'\x2', '\x2', '\x2', '\x15D', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x161', '\x5', 'n', '\x38', '\x2', '\x161', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\x165', '\x5', '`', '\x31', '\x2', '\x163', 
		'\x165', '\x5', '\x64', '\x33', '\x2', '\x164', '\x162', '\x3', '\x2', 
		'\x2', '\x2', '\x164', '\x163', '\x3', '\x2', '\x2', '\x2', '\x165', '[', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x16A', '\x5', '`', '\x31', '\x2', 
		'\x167', '\x16A', '\x5', '\x62', '\x32', '\x2', '\x168', '\x16A', '\x5', 
		'\x66', '\x34', '\x2', '\x169', '\x166', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', ']', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16F', '\x5', 
		'`', '\x31', '\x2', '\x16C', '\x16F', '\x5', '\x64', '\x33', '\x2', '\x16D', 
		'\x16F', '\x5', '\x66', '\x34', '\x2', '\x16E', '\x16B', '\x3', '\x2', 
		'\x2', '\x2', '\x16E', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x16F', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x171', '\t', '\x2', '\x2', '\x2', '\x171', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x172', '\x173', '\x5', '`', '\x31', '\x2', '\x173', '\x174', 
		'\a', '$', '\x2', '\x2', '\x174', '\x175', '\a', '%', '\x2', '\x2', '\x175', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\x5', '`', '\x31', 
		'\x2', '\x177', '\x178', '\a', '$', '\x2', '\x2', '\x178', '\x179', '\x5', 
		'v', '<', '\x2', '\x179', '\x17A', '\a', '%', '\x2', '\x2', '\x17A', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\a', 'P', '\x2', '\x2', 
		'\x17C', 'g', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\a', '$', 
		'\x2', '\x2', '\x17E', '\x17F', '\x5', 'n', '\x38', '\x2', '\x17F', '\x180', 
		'\a', '%', '\x2', '\x2', '\x180', 'i', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x186', '\x5', 'n', '\x38', '\x2', '\x182', '\x183', '\a', '=', '\x2', 
		'\x2', '\x183', '\x185', '\x5', 'n', '\x38', '\x2', '\x184', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x184', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', '\x3', 
		'\x2', '\x2', '\x2', '\x187', 'k', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18B', '\x5', 'n', '\x38', 
		'\x2', '\x18A', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x18D', '\a', '<', '\x2', '\x2', '\x18D', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x18E', '\x18F', '\b', '\x38', '\x1', '\x2', '\x18F', '\x1A8', 
		'\a', 'P', '\x2', '\x2', '\x190', '\x1A8', '\x5', 't', ';', '\x2', '\x191', 
		'\x1A8', '\x5', 'r', ':', '\x2', '\x192', '\x193', '\a', '\"', '\x2', 
		'\x2', '\x193', '\x194', '\x5', 'n', '\x38', '\x2', '\x194', '\x195', 
		'\a', '#', '\x2', '\x2', '\x195', '\x1A8', '\x3', '\x2', '\x2', '\x2', 
		'\x196', '\x197', '\a', 'P', '\x2', '\x2', '\x197', '\x199', '\a', '\"', 
		'\x2', '\x2', '\x198', '\x19A', '\x5', 'j', '\x36', '\x2', '\x199', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'\x19A', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x1A8', '\a', 
		'#', '\x2', '\x2', '\x19C', '\x19D', '\t', '\x3', '\x2', '\x2', '\x19D', 
		'\x1A8', '\x5', 'n', '\x38', '\x11', '\x19E', '\x19F', '\t', '\x4', '\x2', 
		'\x2', '\x19F', '\x1A8', '\x5', 'n', '\x38', '\x10', '\x1A0', '\x1A1', 
		'\t', '\x5', '\x2', '\x2', '\x1A1', '\x1A8', '\x5', 'n', '\x38', '\xF', 
		'\x1A2', '\x1A3', '\a', '\"', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', '`', 
		'\x31', '\x2', '\x1A4', '\x1A5', '\a', '#', '\x2', '\x2', '\x1A5', '\x1A6', 
		'\x5', 'n', '\x38', '\xE', '\x1A6', '\x1A8', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x190', '\x3', 
		'\x2', '\x2', '\x2', '\x1A7', '\x191', '\x3', '\x2', '\x2', '\x2', '\x1A7', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x196', '\x3', '\x2', '\x2', 
		'\x2', '\x1A7', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A0', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1D3', '\x3', 
		'\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\f', '\r', '\x2', '\x2', '\x1AA', 
		'\x1AB', '\t', '\x6', '\x2', '\x2', '\x1AB', '\x1D2', '\x5', 'n', '\x38', 
		'\xE', '\x1AC', '\x1AD', '\f', '\f', '\x2', '\x2', '\x1AD', '\x1AE', '\t', 
		'\x4', '\x2', '\x2', '\x1AE', '\x1D2', '\x5', 'n', '\x38', '\r', '\x1AF', 
		'\x1B0', '\f', '\v', '\x2', '\x2', '\x1B0', '\x1B1', '\t', '\a', '\x2', 
		'\x2', '\x1B1', '\x1D2', '\x5', 'n', '\x38', '\f', '\x1B2', '\x1B3', '\f', 
		'\n', '\x2', '\x2', '\x1B3', '\x1B4', '\t', '\b', '\x2', '\x2', '\x1B4', 
		'\x1D2', '\x5', 'n', '\x38', '\v', '\x1B5', '\x1B6', '\f', '\t', '\x2', 
		'\x2', '\x1B6', '\x1B7', '\t', '\t', '\x2', '\x2', '\x1B7', '\x1D2', '\x5', 
		'n', '\x38', '\n', '\x1B8', '\x1B9', '\f', '\b', '\x2', '\x2', '\x1B9', 
		'\x1BA', '\a', '\x35', '\x2', '\x2', '\x1BA', '\x1D2', '\x5', 'n', '\x38', 
		'\t', '\x1BB', '\x1BC', '\f', '\a', '\x2', '\x2', '\x1BC', '\x1BD', '\a', 
		'\x39', '\x2', '\x2', '\x1BD', '\x1D2', '\x5', 'n', '\x38', '\b', '\x1BE', 
		'\x1BF', '\f', '\x6', '\x2', '\x2', '\x1BF', '\x1C0', '\a', '\x36', '\x2', 
		'\x2', '\x1C0', '\x1D2', '\x5', 'n', '\x38', '\a', '\x1C1', '\x1C2', '\f', 
		'\x5', '\x2', '\x2', '\x1C2', '\x1C3', '\a', '\x37', '\x2', '\x2', '\x1C3', 
		'\x1D2', '\x5', 'n', '\x38', '\x6', '\x1C4', '\x1C5', '\f', '\x4', '\x2', 
		'\x2', '\x1C5', '\x1C6', '\a', '\x38', '\x2', '\x2', '\x1C6', '\x1D2', 
		'\x5', 'n', '\x38', '\x5', '\x1C7', '\x1C8', '\f', '\x3', '\x2', '\x2', 
		'\x1C8', '\x1C9', '\a', '@', '\x2', '\x2', '\x1C9', '\x1D2', '\x5', 'n', 
		'\x38', '\x4', '\x1CA', '\x1CB', '\f', '\x15', '\x2', '\x2', '\x1CB', 
		'\x1D2', '\t', '\x3', '\x2', '\x2', '\x1CC', '\x1CD', '\f', '\x13', '\x2', 
		'\x2', '\x1CD', '\x1D2', '\x5', 'h', '\x35', '\x2', '\x1CE', '\x1CF', 
		'\f', '\x12', '\x2', '\x2', '\x1CF', '\x1D0', '\a', 'N', '\x2', '\x2', 
		'\x1D0', '\x1D2', '\a', 'P', '\x2', '\x2', '\x1D1', '\x1A9', '\x3', '\x2', 
		'\x2', '\x2', '\x1D1', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1B2', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1D1', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1C1', '\x3', '\x2', '\x2', 
		'\x2', '\x1D1', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1D2', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D3', 
		'\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\x3', '\x2', '\x2', 
		'\x2', '\x1D4', 'o', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D3', '\x3', 
		'\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\a', '\x13', '\x2', '\x2', '\x1D7', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\t', '\n', '\x2', 
		'\x2', '\x1D9', 's', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DD', '\x5', 
		'x', '=', '\x2', '\x1DB', '\x1DD', '\x5', 'v', '<', '\x2', '\x1DC', '\x1DA', 
		'\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\x1DD', 'u', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DF', '\t', '\v', 
		'\x2', '\x2', '\x1DF', 'w', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', 
		'\a', 'U', '\x2', '\x2', '\x1E1', 'y', '\x3', '\x2', '\x2', '\x2', ')', 
		'{', '\x80', '\x88', '\x8E', '\x98', '\xA0', '\xA7', '\xAB', '\xB3', '\xB7', 
		'\xC4', '\xCD', '\xD8', '\xEF', '\xF3', '\xF7', '\xFC', '\x100', '\x107', 
		'\x10E', '\x118', '\x11D', '\x122', '\x129', '\x138', '\x144', '\x147', 
		'\x154', '\x15D', '\x164', '\x169', '\x16E', '\x186', '\x18A', '\x199', 
		'\x1A7', '\x1D1', '\x1D3', '\x1DC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
